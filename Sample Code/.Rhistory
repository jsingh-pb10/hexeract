library(dagitty)
x <- dagitty('pdag{
X1 -> X2; X2 <- X3; X4 -- X5; X3 -- X5; X4 -- X3}')
plot(x)
x <- dagitty('pdag{
X1 -> X2; X2 -> X3; X4 -> X3}')
plot(x)
library(huge)
gr = huge(as.matrix(data), method = "glasso")
library(huge)
gr = huge(as.matrix(data), method = "glasso")
library(pcalg)
data = read.table('data.txt',sep=" ",header=TRUE)
indepTest <- gaussCItest ## specify the independence test
n <- 500
suffStat <- list(C = cor(data), n = n) ## using the correlation matrix
pc.est <- pc(suffStat, indepTest, alpha = 0.05, p = 4) ## estimate at CPDAG
plot(pc.est)
library(dplyr)
alpha = seq(0,0.5, length.out = 100) ## creating a sequence of alphas
edge = c(100)
indepTest = gaussCItest
suffStat  = list(C = cor(data), n = nrow(data))
for (i in 1:100)
{
pc.est <- pc(suffStat, indepTest, alpha = alpha[i], p = 20)
edge[i] = sum(as.numeric(pc.est@pMax < 0.05))/2
}
results = tibble(
alpha = alpha,
num_of_edge = edge
)
plot(results)
gr = huge(as.matrix(data), method = "glasso", lambda = 1.2)
gr = huge(as.matrix(data), method = "glasso", lambda = 1.2)
plot(gr, align = TRUE)
library(huge)
gr = huge(as.matrix(data), method = "glasso")
plot(gr, align = TRUE)
gr = huge(as.matrix(data), method = "glasso", lambda = 1)
plot(gr, align = TRUE)
gr = huge(as.matrix(data), method = "glasso", lambda = 0.6)
plot(gr, align = TRUE)
data <- as.matrix(x) lamba <- seq(0,0.5,length.out = 100)
data <- as.matrix(data)
lamba <- seq(0,0.5,length.out = 100)
spa <- c(100) for (i in 1:100) {
data <- as.matrix(data)
lamba <- seq(0,0.5,length.out = 100) spa <- c(100) for (i in 1:100) {
data <- as.matrix(data)
lamba <- seq(0,0.5,length.out = 100)
spa <- c(100)
for (i in 1:100) {
glasso <- huge(data,lambda = lamba[i],method = "glasso")
spa[i] <- glasso$sparsity }
glasso <- huge(data,lambda = 0.1,method = "glasso")
result_glasso <- tibble(
lambda = lamba,
sparsity = spa )
result_glasso %>%
ggplot(aes(x = lambda,y=sparsity))+ geom_point()+ geom_line() data <- as.matrix(x) lamba <- seq(0,0.5,length.out = 100)
data <- as.matrix(data)
lamba <- seq(0,0.25,length.out = 50)
spa <- c(100)
for (i in 1:100) {
glasso <- huge(data,lambda = lamba[i],method = "glasso")
spa[i] <- glasso$sparsity }
result_glasso <- tibble(
lambda = lamba,
sparsity = spa )
dat <- as.matrix(data)
lamba <- seq(0,0.25,length.out = 50)
spa <- c(50)
for (i in 1:100) {
glasso <- huge(dat,lambda = lamba[i],method = "glasso")
spa[i] <- glasso$sparsity }
result_glasso <- tibble(
lambda = lamba,
sparsity = spa )
dat <- as.matrix(data)
lamba <- seq(0,0.25,length.out = 50)
spa <- c(50)
for (i in 1:50) {
glasso <- huge(dat,lambda = lamba[i],method = "glasso",verbose=FALSE)
spa[i] <- glasso$sparsity }
result_glasso <- tibble(
lambda = lamba,
sparsity = spa )
result_glasso %>%
ggplot(aes(x = lambda,y=sparsity))+ geom_point()+ geom_line() data <- as.matrix(x)
dat <- as.matrix(data)
lamba <- seq(0,0.25,length.out = 50)
spa <- c(50)
for (i in 1:50) {
glasso <- huge(dat,lambda = lamba[i],method = "glasso",verbose=FALSE)
spa[i] <- glasso$sparsity }
result_glasso <- tibble(
lambda = lamba,
sparsity = spa )
ggplot(data = result_glasso, aes(x = lambda,y=sparsity))+ geom_point()+ geom_line()
library(ggplot2)
dat <- as.matrix(data)
lamba <- seq(0,0.25,length.out = 50)
spa <- c(50)
for (i in 1:50) {
glasso <- huge(dat,lambda = lamba[i],method = "glasso",verbose=FALSE)
spa[i] <- glasso$sparsity }
result_glasso <- tibble(
lambda = lamba,
sparsity = spa )
ggplot(data = result_glasso, aes(x = lambda,y=sparsity))+ geom_point()
library(dplyr)
alpha = seq(0,0.25, length.out = 50) ## creating a sequence of alphas
edge = c(100)
indepTest = gaussCItest
suffStat  = list(C = cor(data), n = nrow(data))
for (i in 1:50)
{
pc.est <- pc(suffStat, indepTest, alpha = alpha[i], p = 20)
edge[i] = sum(as.numeric(pc.est@pMax < 0.05))/2
}
results = tibble(
alpha = alpha,
num_of_edge = edge
)
plot(results)
library(pcalg)
data = read.table('data.txt',sep=" ",header=TRUE)
indepTest <- gaussCItest ## specify the independence test
n <- 500
suffStat <- list(C = cor(data), n = n) ## using the correlation matrix
pc.est <- pc(suffStat, indepTest, alpha = 0.05) ## estimate a CPDAG
library(pcalg)
data = read.table('data.txt',sep=" ",header=TRUE)
indepTest <- gaussCItest ## specify the independence test
n <- 500
suffStat <- list(C = cor(data), n = n) ## using the correlation matrix
pc.est <- pc(suffStat, indepTest, alpha = 0.05, p=4) ## estimate a CPDAG
plot(pc.est)
library(pcalg)
data = read.table('data.txt',sep=" ",header=TRUE)
indepTest <- gaussCItest ## specify the independence test
n <- 500
suffStat <- list(C = cor(data), n = n) ## using the correlation matrix
pc.est <- pc(suffStat, indepTest, alpha = 0.05, p=20) ## estimate a CPDAG
plot(pc.est)
